
# Finds revenue over 24 months by inputting three lists of monthly employee allocations for the New Business Acquisition team (na),
# the Account Management team (am), and the Support team (su)
def find_revenue(na, am, su):
	customers = 1000
	base_churn = .1
	revenue = 0
	
	managed = am[0]*25
	schedule = [[0, 0, 0, 0, 0, 0]]*20
	for i in range(am[0]):
		schedule[i][0] = 25
	payouts = [120, 144, 172.8, 207.36, 248.83, 298.6]
	
	urev = 0
	mrev = 0

	
	for i in range(24):
		n = na[i]
		a = am[i]
		s = su[i]
		
		churn = (.85**s)*base_churn
		customers = (int)((1-churn)*customers)

		customers += 25
		customers += 5*n

		managed = (1-churn)*managed
		new_managed_pool = customers - managed
		managed = 0

		for j in range(20):
			newSched = [0,0,0,0,0,0]
			if j < a:
				numCust = 0
				curSched = schedule[j]
				for k in range(5):
					mrev += payouts[k]*curSched[k]
					newSched[k+1] = ((1-churn)*curSched[k])
					numCust += ((1-churn)*curSched[k])
				mrev += payouts[5]*curSched[5]
				newSched[5] = newSched[5] + ((1-churn)*curSched[5])
				numCust += ((1-churn)*curSched[5])
				newSched[0] = min(25 - numCust, new_managed_pool)
				new_managed_pool -= newSched[0]
				managed += sum(newSched)
			schedule[j] = newSched
			
		unmanaged = customers - managed
		
		urev += 100*unmanaged
		print(mrev + urev)
	return urev + mrev

# Given the number of customers, finds the optimal allocation of employees between the New Business Acquisition team and the Support team
def optimize(customers):
	base_churn = .1
	maxi = -1
	max_nab = -1
	for i in range(20):
		end_customers = customers*(1-0.1*(.85**(20-i))) + 5*i + 25
		if end_customers > maxi:
			maxi = end_customers
			max_nab = i
	return (max_nab, maxi)


# The optimal allocation

maxNa = [13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 8, 8]
maxAm = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
maxSu = [7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12]

print(find_revenue(maxNa, maxAm, maxSu))

